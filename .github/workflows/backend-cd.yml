name: Stage 2 - Backend CD - Deploy to Staging

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      NS: sit722-staging-${{ github.run_id }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        run: az aks get-credentials --resource-group "${{ secrets.AKS_RESOURCE_GROUP }}" --name "${{ secrets.AKS_CLUSTER }}" --overwrite-existing

      - name: Create namespace
        run: kubectl create namespace "$NS" || true

      - name: Generate K8s manifests
        env:
          ACR: ${{ secrets.ACR_LOGIN_SERVER }}
        run: |
          mkdir -p k8s

          # Databases (simple Pods)
          cat > k8s/databases.yaml <<'YAML'
          apiVersion: v1
          kind: Pod
          metadata: { name: product-db }
          spec:
            containers:
            - name: postgres
              image: postgres:15-alpine
              env:
              - { name: POSTGRES_DB, value: "products" }
              - { name: POSTGRES_USER, value: "postgres" }
              - { name: POSTGRES_PASSWORD, value: "postgres" }
              ports: [{ containerPort: 5432 }]
          ---
          apiVersion: v1
          kind: Pod
          metadata: { name: order-db }
          spec:
            containers:
            - name: postgres
              image: postgres:15-alpine
              env:
              - { name: POSTGRES_DB, value: "orders" }
              - { name: POSTGRES_USER, value: "postgres" }
              - { name: POSTGRES_PASSWORD, value: "postgres" }
              ports: [{ containerPort: 5432 }]
          ---
          apiVersion: v1
          kind: Pod
          metadata: { name: customer-db }
          spec:
            containers:
            - name: postgres
              image: postgres:15-alpine
              env:
              - { name: POSTGRES_DB, value: "customers" }
              - { name: POSTGRES_USER, value: "postgres" }
              - { name: POSTGRES_PASSWORD, value: "postgres" }
              ports: [{ containerPort: 5432 }]
          YAML

          # Product service
          cat > k8s/product.yaml <<YAML
          apiVersion: apps/v1
          kind: Deployment
          metadata: { name: product-service }
          spec:
            replicas: 1
            selector: { matchLabels: { app: product } }
            template:
              metadata: { labels: { app: product } }
              spec:
                containers:
                - name: product-service
                  image: ${ACR}/product_service:latest
                  ports: [{ containerPort: 8000 }]
                  env:
                  - { name: POSTGRES_HOST, value: "product-db" }
                  - { name: POSTGRES_DB,   value: "products" }
                  - { name: POSTGRES_USER, value: "postgres" }
                  - { name: POSTGRES_PASSWORD, value: "postgres" }
          ---
          apiVersion: v1
          kind: Service
          metadata: { name: product-service }
          spec:
            selector: { app: product }
            ports: [{ port: 8001, targetPort: 8000, name: http }]
            type: LoadBalancer
          YAML

          # Customer service
          cat > k8s/customer.yaml <<YAML
          apiVersion: apps/v1
          kind: Deployment
          metadata: { name: customer-service }
          spec:
            replicas: 1
            selector: { matchLabels: { app: customer } }
            template:
              metadata: { labels: { app: customer } }
              spec:
                containers:
                - name: customer-service
                  image: ${ACR}/customer_service:latest
                  ports: [{ containerPort: 8000 }]
                  env:
                  - { name: POSTGRES_HOST, value: "customer-db" }
                  - { name: POSTGRES_DB,   value: "customers" }
                  - { name: POSTGRES_USER, value: "postgres" }
                  - { name: POSTGRES_PASSWORD, value: "postgres" }
          ---
          apiVersion: v1
          kind: Service
          metadata: { name: customer-service }
          spec:
            selector: { app: customer }
            ports: [{ port: 8003, targetPort: 8000, name: http }]
            type: LoadBalancer
          YAML

          # Order service
          cat > k8s/order.yaml <<YAML
          apiVersion: apps/v1
          kind: Deployment
          metadata: { name: order-service }
          spec:
            replicas: 1
            selector: { matchLabels: { app: order } }
            template:
              metadata: { labels: { app: order } }
              spec:
                containers:
                - name: order-service
                  image: ${ACR}/order_service:latest
                  ports: [{ containerPort: 8000 }]
                  env:
                  - { name: POSTGRES_HOST, value: "order-db" }
                  - { name: POSTGRES_DB,   value: "orders" }
                  - { name: POSTGRES_USER, value: "postgres" }
                  - { name: POSTGRES_PASSWORD, value: "postgres" }
                  - { name: CUSTOMER_SERVICE_URL, value: "http://customer-service:8000" }
          ---
          apiVersion: v1
          kind: Service
          metadata: { name: order-service }
          spec:
            selector: { app: order }
            ports: [{ port: 8002, targetPort: 8000, name: http }]
            type: LoadBalancer
          YAML

      - name: Apply manifests
        run: |
          kubectl apply -n "$NS" -f k8s/databases.yaml
          kubectl apply -n "$NS" -f k8s/product.yaml
          kubectl apply -n "$NS" -f k8s/customer.yaml
          kubectl apply -n "$NS" -f k8s/order.yaml

      - name: Wait for rollouts
        run: |
          for d in product-service customer-service order-service; do
            kubectl rollout status deploy/$d -n "$NS" --timeout=180s || exit 1
          done

      - name: Capture External IPs
        id: get_ips
        run: |
          get_ip () { kubectl get svc "$1" -n "$NS" -o jsonpath='{.status.loadBalancer.ingress[0].ip}'; }
          echo "PRODUCT_IP=$(get_ip product-service)" >> $GITHUB_ENV
          echo "ORDER_IP=$(get_ip order-service)" >> $GITHUB_ENV
          echo "CUSTOMER_IP=$(get_ip customer-service)" >> $GITHUB_ENV

      - name: Print External IPs
        run: |
          echo "::notice:: Product Service IP:   $PRODUCT_IP:8001"
          echo "::notice:: Order Service IP:     $ORDER_IP:8002"
          echo "::notice:: Customer Service IP:  $CUSTOMER_IP:8003"

      - name: Health checks (external)
        run: |
          for u in "http://${PRODUCT_IP}:8001/health" "http://${CUSTOMER_IP}:8002/health" "http://${ORDER_IP}:8003/health"; do
          echo "GET $u"
          curl -sf "$u" || exit 1
          done
