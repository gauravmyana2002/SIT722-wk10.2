name: Backend CD - Deploy to Staging

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      NS: sit722-staging-${{ github.run_id }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        run: az aks get-credentials --resource-group "${{ secrets.AKS_RESOURCE_GROUP }}" --name "${{ secrets.AKS_CLUSTER }}" --overwrite-existing

      - name: Create namespace
        run: kubectl create namespace "$NS" || true

      - name: Generate K8s manifests
        env:
          ACR: ${{ secrets.ACR_LOGIN_SERVER }}
        run: |
          mkdir -p k8s
          # DB pods (quick staging only)
          cat > k8s/databases.yaml <<'YAML'
          apiVersion: v1
          kind: Pod
          metadata: { name: product-db }
          spec:
            containers:
            - name: postgres
              image: postgres:15-alpine
              env:
              - { name: POSTGRES_DB, value: "products" }
              - { name: POSTGRES_USER, value: "postgres" }
              - { name: POSTGRES_PASSWORD, value: "postgres" }
              ports: [{ containerPort: 5432 }]
          ---
          apiVersion: v1
          kind: Pod
          metadata: { name: order-db }
          spec:
            containers:
            - name: postgres
              image: postgres:15-alpine
              env:
              - { name: POSTGRES_DB, value: "orders" }
              - { name: POSTGRES_USER, value: "postgres" }
              - { name: POSTGRES_PASSWORD, value: "postgres" }
              ports: [{ containerPort: 5432 }]
          ---
          apiVersion: v1
          kind: Pod
          metadata: { name: customer-db }
          spec:
            containers:
            - name: postgres
              image: postgres:15-alpine
              env:
              - { name: POSTGRES_DB, value: "customers" }
              - { name: POSTGRES_USER, value: "postgres" }
              - { name: POSTGRES_PASSWORD, value: "postgres" }
              ports: [{ containerPort: 5432 }]
          YAML

          # Product
          cat > k8s/product.yaml <<YAML
          apiVersion: apps/v1
          kind: Deployment
          metadata: { name: product-service }
          spec:
            replicas: 1
            selector: { matchLabels: { app: product } }
            template:
              metadata: { labels: { app: product } }
              spec:
                containers:
                - name: product-service
                  image: ${ACR}/product_service:latest
                  ports: [{ containerPort: 8000 }]
                  env:
                  - { name: POSTGRES_HOST, value: "product-db" }
                  - { name: POSTGRES_DB,   value: "products" }
                  - { name: POSTGRES_USER, value: "postgres" }
                  - { name: POSTGRES_PASSWORD, value: "postgres" }
          ---
          apiVersion: v1
          kind: Service
          metadata: { name: product-service }
          spec:
            selector: { app: product }
            ports: [{ port: 8000, targetPort: 8000, name: http }]
            type: ClusterIP
          YAML

          # Customer
          cat > k8s/customer.yaml <<YAML
          apiVersion: apps/v1
          kind: Deployment
          metadata: { name: customer-service }
          spec:
            replicas: 1
            selector: { matchLabels: { app: customer } }
            template:
              metadata: { labels: { app: customer } }
              spec:
                containers:
                - name: customer-service
                  image: ${ACR}/customer_service:latest
                  ports: [{ containerPort: 8000 }]
                  env:
                  - { name: POSTGRES_HOST, value: "customer-db" }
                  - { name: POSTGRES_DB,   value: "customers" }
                  - { name: POSTGRES_USER, value: "postgres" }
                  - { name: POSTGRES_PASSWORD, value: "postgres" }
          ---
          apiVersion: v1
          kind: Service
          metadata: { name: customer-service }
          spec:
            selector: { app: customer }
            ports: [{ port: 8000, targetPort: 8000, name: http }]
            type: ClusterIP
          YAML

          # Order
          cat > k8s/order.yaml <<YAML
          apiVersion: apps/v1
          kind: Deployment
          metadata: { name: order-service }
          spec:
            replicas: 1
            selector: { matchLabels: { app: order } }
            template:
              metadata: { labels: { app: order } }
              spec:
                containers:
                - name: order-service
                  image: ${ACR}/order_service:latest
                  ports: [{ containerPort: 8000 }]
                  env:
                  - { name: POSTGRES_HOST, value: "order-db" }
                  - { name: POSTGRES_DB,   value: "orders" }
                  - { name: POSTGRES_USER, value: "postgres" }
                  - { name: POSTGRES_PASSWORD, value: "postgres" }
                  - { name: CUSTOMER_SERVICE_URL, value: "http://customer-service:8000" }
          ---
          apiVersion: v1
          kind: Service
          metadata: { name: order-service }
          spec:
            selector: { app: order }
            ports: [{ port: 8001, targetPort: 8000, name: http }]
            type: ClusterIP
          YAML

      - name: Apply manifests
        run: |
          kubectl apply -n "$NS" -f k8s/databases.yaml
          kubectl apply -n "$NS" -f k8s/product.yaml
          kubectl apply -n "$NS" -f k8s/customer.yaml
          kubectl apply -n "$NS" -f k8s/order.yaml

      - name: Wait for rollouts
        run: |
          for d in product-service customer-service order-service; do
            kubectl rollout status deploy/$d -n "$NS" --timeout=180s || exit 1
          done

      - name: Health checks
        run: |
          kubectl run curl -n "$NS" --rm -i --tty --image=curlimages/curl -- \
            sh -c 'for u in product-service:8000/health customer-service:8000/health order-service:8000/health; do echo "GET $u"; curl -sf "http://$u"; echo; done'

      - name: Teardown
        if: always()
        run: kubectl delete namespace "$NS"
