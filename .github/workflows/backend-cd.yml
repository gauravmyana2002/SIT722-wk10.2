# .github/workflows/backend-cd.yml
name: Stage 2 - Backend CD - Deploy to Staging

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      NS: sit722-staging-${{ github.run_id }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        run: |
          az aks get-credentials \
            --resource-group "${{ secrets.AKS_RESOURCE_GROUP }}" \
            --name "${{ secrets.AKS_CLUSTER }}" \
            --overwrite-existing

      - name: Create namespace
        run: kubectl create namespace "$NS" || true

      - name: Generate K8s manifests
        env:
          ACR: ${{ secrets.ACR_LOGIN_SERVER }}
          NS: ${{ env.NS }}
        run: |
          mkdir -p k8s

          # --- Databases ---
          cat > k8s/databases.yaml <<YAML
          apiVersion: apps/v1
          kind: Deployment
          metadata: { name: product-db, namespace: $NS }
          spec:
            replicas: 1
            selector: { matchLabels: { app: product-db } }
            template:
              metadata: { labels: { app: product-db } }
              spec:
                containers:
                - name: postgres
                  image: postgres:15-alpine
                  env:
                  - { name: POSTGRES_DB, value: "products" }
                  - { name: POSTGRES_USER, value: "postgres" }
                  - { name: POSTGRES_PASSWORD, value: "postgres" }
          ---
          apiVersion: v1
          kind: Service
          metadata: { name: product-db, namespace: $NS }
          spec:
            selector: { app: product-db }
            ports: [{ port: 5432, targetPort: 5432 }]
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata: { name: order-db, namespace: $NS }
          spec:
            replicas: 1
            selector: { matchLabels: { app: order-db } }
            template:
              metadata: { labels: { app: order-db } }
              spec:
                containers:
                - name: postgres
                  image: postgres:15-alpine
                  env:
                  - { name: POSTGRES_DB, value: "orders" }
                  - { name: POSTGRES_USER, value: "postgres" }
                  - { name: POSTGRES_PASSWORD, value: "postgres" }
          ---
          apiVersion: v1
          kind: Service
          metadata: { name: order-db, namespace: $NS }
          spec:
            selector: { app: order-db }
            ports: [{ port: 5432, targetPort: 5432 }]
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata: { name: customer-db, namespace: $NS }
          spec:
            replicas: 1
            selector: { matchLabels: { app: customer-db } }
            template:
              metadata: { labels: { app: customer-db } }
              spec:
                containers:
                - name: postgres
                  image: postgres:15-alpine
                  env:
                  - { name: POSTGRES_DB, value: "customers" }
                  - { name: POSTGRES_USER, value: "postgres" }
                  - { name: POSTGRES_PASSWORD, value: "postgres" }
          ---
          apiVersion: v1
          kind: Service
          metadata: { name: customer-db, namespace: $NS }
          spec:
            selector: { app: customer-db }
            ports: [{ port: 5432, targetPort: 5432 }]
          YAML

          # --- Product Service ---
          cat > k8s/product.yaml <<YAML
          apiVersion: apps/v1
          kind: Deployment
          metadata: { name: product-service, namespace: $NS }
          spec:
            replicas: 1
            selector: { matchLabels: { app: product } }
            template:
              metadata: { labels: { app: product } }
              spec:
                containers:
                - name: product-service
                  image: ${ACR}/product_service:latest
                  ports: [{ containerPort: 8000 }]
                  env:
                  - { name: POSTGRES_HOST, value: "product-db" }
                  - { name: POSTGRES_DB,   value: "products" }
                  - { name: POSTGRES_USER, value: "postgres" }
                  - { name: POSTGRES_PASSWORD, value: "postgres" }
          ---
          apiVersion: v1
          kind: Service
          metadata: { name: product-service, namespace: $NS }
          spec:
            selector: { app: product }
            ports: [{ port: 8000, targetPort: 8000 }]
            type: LoadBalancer
          YAML

          # --- Customer Service ---
          cat > k8s/customer.yaml <<YAML
          apiVersion: apps/v1
          kind: Deployment
          metadata: { name: customer-service, namespace: $NS }
          spec:
            replicas: 1
            selector: { matchLabels: { app: customer } }
            template:
              metadata: { labels: { app: customer } }
              spec:
                containers:
                - name: customer-service
                  image: ${ACR}/customer_service:latest
                  ports: [{ containerPort: 8000 }]
                  env:
                  - { name: POSTGRES_HOST, value: "customer-db" }
                  - { name: POSTGRES_DB,   value: "customers" }
                  - { name: POSTGRES_USER, value: "postgres" }
                  - { name: POSTGRES_PASSWORD, value: "postgres" }
          ---
          apiVersion: v1
          kind: Service
          metadata: { name: customer-service, namespace: $NS }
          spec:
            selector: { app: customer }
            ports: [{ port: 8000, targetPort: 8000 }]
            type: LoadBalancer
          YAML

          # --- Order Service ---
          cat > k8s/order.yaml <<YAML
          apiVersion: apps/v1
          kind: Deployment
          metadata: { name: order-service, namespace: $NS }
          spec:
            replicas: 1
            selector: { matchLabels: { app: order } }
            template:
              metadata: { labels: { app: order } }
              spec:
                containers:
                - name: order-service
                  image: ${ACR}/order_service:latest
                  ports: [{ containerPort: 8000 }]
                  env:
                  - { name: POSTGRES_HOST, value: "order-db" }
                  - { name: POSTGRES_DB,   value: "orders" }
                  - { name: POSTGRES_USER, value: "postgres" }
                  - { name: POSTGRES_PASSWORD, value: "postgres" }
                  - { name: CUSTOMER_SERVICE_URL, value: "http://customer-service:8000" }
          ---
          apiVersion: v1
          kind: Service
          metadata: { name: order-service, namespace: $NS }
          spec:
            selector: { app: order }
            ports: [{ port: 8001, targetPort: 8000 }]
            type: LoadBalancer
          YAML

      - name: Apply manifests
        run: |
          kubectl apply -f k8s/databases.yaml
          kubectl apply -f k8s/product.yaml
          kubectl apply -f k8s/customer.yaml
          kubectl apply -f k8s/order.yaml

      - name: Wait for rollouts
        run: |
          for d in product-service customer-service order-service; do
            kubectl rollout status deploy/$d -n "$NS" --timeout=180s || exit 1
          done

      - name: Capture backend IPs
        run: |
          PRODUCT_IP=""
          ORDER_IP=""
          CUSTOMER_IP=""
          for i in {1..60}; do
            PRODUCT_IP=$(kubectl get svc product-service  -n "$NS" -o jsonpath='{.status.loadBalancer.ingress[0].ip}') || true
            ORDER_IP=$(kubectl get svc order-service    -n "$NS" -o jsonpath='{.status.loadBalancer.ingress[0].ip}') || true
            CUSTOMER_IP=$(kubectl get svc customer-service -n "$NS" -o jsonpath='{.status.loadBalancer.ingress[0].ip}') || true
            if [ -n "$PRODUCT_IP" ] && [ -n "$ORDER_IP" ] && [ -n "$CUSTOMER_IP" ]; then break; fi
            sleep 5
          done
          echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
          echo "ORDER_IP=$ORDER_IP" >> $GITHUB_ENV
          echo "CUSTOMER_IP=$CUSTOMER_IP" >> $GITHUB_ENV
          echo "::notice:: Product IP: $PRODUCT_IP"
          echo "::notice:: Order IP:   $ORDER_IP"
          echo "::notice:: Customer IP: $CUSTOMER_IP"

      - name: Health checks
        run: |
          kubectl run curl -n "$NS" --rm -i --tty --image=curlimages/curl -- \
            sh -c 'for u in product-service:8000/health customer-service:8000/health order-service:8001/health; do echo "GET $u"; curl -sf "http://$u"; echo; done'

      - name: Teardown
        if: always()
        run: kubectl delete namespace "$NS"
