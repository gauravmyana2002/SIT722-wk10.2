name: Stage 3 - Frontend CD - Deploy to Staging

on:
  repository_dispatch:
    types: [backend_cd_succeeded]
  workflow_dispatch:
    inputs:
      product_url:  { description: "Override Product API URL",  required: false, default: "" }
      order_url:    { description: "Override Order API URL",    required: false, default: "" }
      customer_url: { description: "Override Customer API URL", required: false, default: "" }  

jobs:
  deploy_frontend:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    env:
      PROD_PORT: "8001"
      ORD_PORT:  "8002"
      CUST_PORT: "8003"
      FRONTEND_NS: sit722-frontend            # <- choose a stable ns for frontend
      FRONTEND_SVC: frontend

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: AKS context
        run: az aks get-credentials --resource-group "${{ secrets.AKS_RESOURCE_GROUP }}" --name "${{ secrets.AKS_CLUSTER }}" --overwrite-existing

      - name: Ensure namespace
        run: kubectl create namespace "$FRONTEND_NS" || true

      # --- Resolve backend URLs (from inputs or discover across namespaces) ---
      - name: Resolve backend URLs
        id: urls
        env:
          NS: sit722-staging-${{ github.run_id }}
          PROD_PORT: "8001"
          ORD_PORT:  "8002"
          CUST_PORT: "8003"
        run: |
          # Prefer values passed from backend via repository_dispatch
          P_IN='${{ github.event.client_payload.product_url }}'
          O_IN='${{ github.event.client_payload.order_url }}'
          C_IN='${{ github.event.client_payload.customer_url }}'

          # Allow manual override via workflow_dispatch inputs
          [ -n "${{ inputs.product_url }}" ]  && P_IN="${{ inputs.product_url }}"
          [ -n "${{ inputs.order_url }}" ]    && O_IN="${{ inputs.order_url }}"
          [ -n "${{ inputs.customer_url }}" ] && C_IN="${{ inputs.customer_url }}"

          get_ip () { kubectl get svc "$1" -n "$NS" -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null; }

          if [ -z "$P_IN" ]; then P_IN="http://$(get_ip product-service):${PROD_PORT}"; fi
          if [ -z "$O_IN" ]; then O_IN="http://$(get_ip order-service):${ORD_PORT}";   fi
          if [ -z "$C_IN" ]; then C_IN="http://$(get_ip customer-service):${CUST_PORT}"; fi

          echo "PRODUCT_URL=$P_IN"  >> $GITHUB_ENV
          echo "ORDER_URL=$O_IN"    >> $GITHUB_ENV
          echo "CUSTOMER_URL=$C_IN" >> $GITHUB_ENV
          echo "::notice::Product  $P_IN"
          echo "::notice::Order    $O_IN"
          echo "::notice::Customer $C_IN"

      - name: Inject API URLs into main.js
        run: |
          sed -i "s|_PRODUCT_API_URL_|${PRODUCT_URL}|g"  frontend/main.js
          sed -i "s|_ORDER_API_URL_|${ORDER_URL}|g"      frontend/main.js
          sed -i "s|_CUSTOMER_API_URL_|${CUSTOMER_URL}|g" frontend/main.js
          head -n 30 frontend/main.js

      - name: ACR login
        run: |
          ACR="${{ secrets.ACR_LOGIN_SERVER }}"
          NAME="${ACR##https://}"; NAME="${NAME%%/*}"; NAME="${NAME%%.azurecr.io}"
          az acr login --name "$NAME"

      - name: Build & push image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest ./frontend
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest

      - name: Deploy frontend (to chosen namespace)
        run: kubectl apply -n "$FRONTEND_NS" -f k8s/frontend.yaml

      - name: Wait for Frontend External IP
        run: |
          for i in $(seq 1 60); do
            FIP=$(kubectl get svc "$FRONTEND_SVC" -n "$FRONTEND_NS" -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            [ -n "$FIP" ] && break
            echo "waiting for frontend LB ip... $i/60"
            sleep 5
          done
          [ -n "$FIP" ] || { echo "::error::Frontend IP not assigned"; exit 1; }
          echo "::notice:: Frontend URL: http://$FIP/"
