name: Stage 3 - Frontend CD - Deploy to Staging

on:
  workflow_run:
    workflows: ["Stage 2 - Backend CD - Deploy to Staging"]
    types: [completed]
  workflow_dispatch:

jobs:
  deploy_frontend:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    env:
      PRODUCT_SVC: product-service
      ORDER_SVC: order-service
      CUSTOMER_SVC: customer-service
      PRODUCT_PORT: "8001"
      ORDER_PORT: "8002"
      CUSTOMER_PORT: "8003"

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        run: az aks get-credentials --resource-group "${{ secrets.AKS_RESOURCE_GROUP }}" --name "${{ secrets.AKS_CLUSTER }}" --overwrite-existing

      - name: Detect staging namespace
        id: ns
        run: |
          for ns in $(kubectl get ns -o jsonpath='{.items[*].metadata.name}'); do
            if kubectl get svc product-service -n "$ns" >/dev/null 2>&1; then
              echo "ns=$ns" >> $GITHUB_OUTPUT
              exit 0
            fi
          done
          echo "::error::No staging namespace with backend services found."
          exit 1

      - name: Resolve backend IPs
        run: |
          NS="${{ steps.ns.outputs.ns }}"
          get_ip () { kubectl get svc "$1" -n "$NS" -o jsonpath='{.status.loadBalancer.ingress[0].ip}'; }
          P=$(get_ip $PRODUCT_SVC)
          O=$(get_ip $ORDER_SVC)
          C=$(get_ip $CUSTOMER_SVC)

          echo "PRODUCT_URL=http://$P:${PRODUCT_PORT}"   >> $GITHUB_ENV
          echo "ORDER_URL=http://$O:${ORDER_PORT}"       >> $GITHUB_ENV
          echo "CUSTOMER_URL=http://$C:${CUSTOMER_PORT}" >> $GITHUB_ENV

          echo "Product API:  http://$P:${PRODUCT_PORT}"
          echo "Order API:    http://$O:${ORDER_PORT}"
          echo "Customer API: http://$C:${CUSTOMER_PORT}"

      - name: Inject API URLs into frontend
        run: |
          sed -i "s|_PRODUCT_API_URL_|${PRODUCT_URL}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${ORDER_URL}|g" frontend/main.js
          sed -i "s|_CUSTOMER_API_URL_|${CUSTOMER_URL}|g" frontend/main.js
          head -n 20 frontend/main.js

      - name: ACR Login
        run: |
          NAME="${{ secrets.ACR_LOGIN_SERVER }}"
          NAME="${NAME##https://}"; NAME="${NAME%%/*}"; NAME="${NAME%%.azurecr.io}"
          az acr login --name "$NAME"

      - name: Build and Push Frontend
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest ./frontend
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest

      - name: Deploy frontend
        run: |
          NS="${{ steps.ns.outputs.ns }}"
          kubectl apply -n "$NS" -f k8s/frontend.yaml

      - name: Get Frontend URL
        run: |
          NS="${{ steps.ns.outputs.ns }}"
          for i in {1..60}; do
            FIP=$(kubectl get svc frontend -n "$NS" -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            [ -n "$FIP" ] && break
            sleep 5
          done
          [ -n "$FIP" ] || { echo "::error::Frontend IP not assigned"; exit 1; }
          echo "Frontend URL: http://$FIP/"
