name: Stage 3 - Frontend CD - Deploy to Staging

on:
  workflow_run:
    workflows: ["Stage 2 - Backend CD - Deploy to Staging"]
    types: [completed]
  workflow_dispatch:
    inputs:
      product_url:  { description: "http://X.X.X.X:8001", required: false, default: "" }
      order_url:    { description: "http://Y.Y.Y.Y:8002", required: false, default: "" }
      customer_url: { description: "http://Z.Z.Z.Z:8003", required: false, default: "" }

jobs:
  deploy_frontend:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    env:
      PROD_PORT: "8001"
      ORD_PORT:  "8002"
      CUST_PORT: "8003"
      FRONTEND_NS: sit722-frontend            # <- choose a stable ns for frontend
      FRONTEND_SVC: frontend

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: AKS context
        run: az aks get-credentials --resource-group "${{ secrets.AKS_RESOURCE_GROUP }}" --name "${{ secrets.AKS_CLUSTER }}" --overwrite-existing

      - name: Ensure namespace
        run: kubectl create namespace "$FRONTEND_NS" || true

      # --- Resolve backend URLs (from inputs or discover across namespaces) ---
      - name: Resolve backend IPs
        run: |
          get_ip () {
          kubectl get svc "$1" -n "$NS" -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null
          }

          PRODUCT_IP=$(get_ip product-service) || true
          ORDER_IP=$(get_ip order-service) || true
          CUSTOMER_IP=$(get_ip customer-service) || true

          if [ -z "$PRODUCT_IP" ]; then echo "::error::Product IP not found"; exit 1; fi
          if [ -z "$ORDER_IP" ]; then echo "::error::Order IP not found"; exit 1; fi
          if [ -z "$CUSTOMER_IP" ]; then echo "::error::Customer IP not found"; exit 1; fi

          echo "PRODUCT_URL=http://$PRODUCT_IP:${PROD_PORT}"   >> $GITHUB_ENV
          echo "ORDER_URL=http://$ORDER_IP:${ORD_PORT}"       >> $GITHUB_ENV
          echo "CUSTOMER_URL=http://$CUSTOMER_IP:${CUST_PORT}" >> $GITHUB_ENV

          echo "::notice:: Product  = http://$PRODUCT_IP:${PROD_PORT}"
          echo "::notice:: Order    = http://$ORDER_IP:${ORD_PORT}"
          echo "::notice:: Customer = http://$CUSTOMER_IP:${CUST_PORT}"

      - name: Inject API URLs into main.js
        run: |
          sed -i "s|_PRODUCT_API_URL_|${PRODUCT_URL}|g"  frontend/main.js
          sed -i "s|_ORDER_API_URL_|${ORDER_URL}|g"      frontend/main.js
          sed -i "s|_CUSTOMER_API_URL_|${CUSTOMER_URL}|g" frontend/main.js
          head -n 30 frontend/main.js

      - name: ACR login
        run: |
          ACR="${{ secrets.ACR_LOGIN_SERVER }}"
          NAME="${ACR##https://}"; NAME="${NAME%%/*}"; NAME="${NAME%%.azurecr.io}"
          az acr login --name "$NAME"

      - name: Build & push image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest ./frontend
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest

      - name: Deploy frontend (to chosen namespace)
        run: kubectl apply -n "$FRONTEND_NS" -f k8s/frontend.yaml

      - name: Wait for Frontend External IP
        run: |
          for i in $(seq 1 60); do
            FIP=$(kubectl get svc "$FRONTEND_SVC" -n "$FRONTEND_NS" -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            [ -n "$FIP" ] && break
            echo "waiting for frontend LB ip... $i/60"
            sleep 5
          done
          [ -n "$FIP" ] || { echo "::error::Frontend IP not assigned"; exit 1; }
          echo "::notice:: Frontend URL: http://$FIP/"
