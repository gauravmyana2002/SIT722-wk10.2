name: Stage 2 - Frontend CD - Deploy to Staging

on:
  # Trigger automatically after backend CD
  workflow_run:
    workflows: ["Stage 2 - Backend CD - Deploy to Staging"]
    types: [completed]

  # Manual run still possible
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: "AKS cluster name"
        required: false
        default: "<aks_cluster_name>"
      aks_resource_group:
        description: "AKS resource group"
        required: false
        default: "<aks_resource_group>"
      product_url:
        description: "Override Product API URL (http://X.X.X.X:8001)"
        required: false
        default: ""
      order_url:
        description: "Override Order API URL (http://Y.Y.Y.X:8002)"
        required: false
        default: ""
      customer_url:
        description: "Override Customer API URL (http://Y.Y.Y.Z:8003)"
        required: false
        default: ""

jobs:
  deploy_frontend:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    env:
      PRODUCT_SVC: product-service
      ORDER_SVC: order-service
      CUSTOMER_SVC: customer-service
      PRODUCT_PORT: "8001"
      ORDER_PORT:   "8002"
      CUSTOMER_PORT: "8003"
      NS: sit722-staging-${{ github.run_id }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        run: |
          az aks get-credentials \
            --resource-group "${{ secrets.AKS_RESOURCE_GROUP || github.event.inputs.aks_resource_group }}" \
            --name "${{ secrets.AKS_CLUSTER || github.event.inputs.aks_cluster_name }}" \
            --overwrite-existing

      # Resolve IPs unless manually provided
      - name: Resolve backend IPs
        id: ips
        run: |
          get_ip () {
          kubectl get svc "$1" -n "$NS" -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null
          }

          PRODUCT_IP=$(get_ip product-service) || true
          ORDER_IP=$(get_ip order-service) || true
          CUSTOMER_IP=$(get_ip customer-service) || true

          if [ -z "$PRODUCT_IP" ]; then echo "::error::Product IP not found"; exit 1; fi
          if [ -z "$ORDER_IP" ]; then echo "::error::Order IP not found"; exit 1; fi
          if [ -z "$CUSTOMER_IP" ]; then echo "::error::Customer IP not found"; exit 1; fi

          echo "PRODUCT_URL=http://$PRODUCT_IP:${PROD_PORT}"   >> $GITHUB_ENV
          echo "ORDER_URL=http://$ORDER_IP:${ORD_PORT}"       >> $GITHUB_ENV
          echo "CUSTOMER_URL=http://$CUSTOMER_IP:${CUST_PORT}" >> $GITHUB_ENV

          echo "::notice:: Product  = http://$PRODUCT_IP:${PROD_PORT}"
          echo "::notice:: Order    = http://$ORDER_IP:${ORD_PORT}"
          echo "::notice:: Customer = http://$CUSTOMER_IP:${CUST_PORT}"


      - name: Inject API URLs into main.js
        run: |
          sed -i "s|_PRODUCT_API_URL_|${PRODUCT_URL}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${ORDER_URL}|g" frontend/main.js
          sed -i "s|_CUSTOMER_API_URL_|${CUSTOMER_URL}|g" frontend/main.js

          echo "--- main.js (first 40 lines) ---"
          head -n 40 frontend/main.js

      - name: ACR Login
        run: |
          NAME="${{ secrets.ACR_LOGIN_SERVER }}"
          NAME="${NAME##https://}"
          NAME="${NAME%%/*}"
          NAME="${NAME%%.azurecr.io}"
          az acr login --name "$NAME"

      - name: Build & Push Frontend image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest ./frontend
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest

      - name: Deploy Frontend to AKS
        run: |
          kubectl apply -n "$NS" -f k8s/frontend.yaml || true
